#include<bits/stdc++.h>
#include<unordered_map>
#define O_O ios::sync_with_stdio(false);cin.tie(0); cout.tie(0);
using namespace std;
typedef long long ll;
const int maxn = 1e6 + 10;
const int mod = 1e9 + 7;

ll gcd(ll a, ll b) { return a == 0 ? b : gcd(b % a, a); } //最大公约数

ll fmul(ll a, ll b, ll p) { //快速乘
	ll res = 0;
	a = (a % p + p) % p; //防止为负陷入死循环
	while (b) {
		if (b & 1) res = (res + a) % p;
		a = (a << 1) % p;
		b >>= 1;
	}
	return res;
}

ll fpow(ll a, ll b, ll p) { //快速幂
	ll res = 1;
	a %= p;
	while (b) {
		if (b & 1) res = res * a % p;
		a = a * a % p;
		b >>= 1;
	}
	return res;
}

ll inv(ll a, ll b, ll mod) { return a % mod * fpow(b, mod - 2, mod) % mod;}//逆元
	
ll ex_gcd(ll a, ll b, ll& x, ll& y) { //扩展欧几里得
	ll d = a;
	if (!b) x = 1, y = 0;
	else { d = ex_gcd(b, a % b, y, x); y -= a / b * x; }
	return d;
}

ll ex_inv(ll a, ll mod) {	 //拓欧求逆元 存在逆元条件 gcd(a,mod)=1
	ll x, y;
	ll g = ex_gcd(a, mod, x, y);
	if (g != 1) return -1;
	return (x % mod + mod) % mod;
}

ll bsgs(ll a, ll b, ll p) { //北上广深qwq	gcd(a,p)=1
	b %= p;
	if (b == 1 || p == 1) return 0;
	ll n = sqrt(p);
	static unordered_map<ll, ll>bmp;
	bmp.clear();
	ll inva = ex_inv(fpow(a, n - 1, p), p) * b % p;
	for (ll i = n - 1; i >= 0; i--) bmp[inva] = i, inva = inva * a % p;
	ll ta = 1, powa = fpow(a, n, p);
	for (ll k = 0; k <= p; k += n) {
		if (bmp.count(ta)) return k + bmp[ta];
		ta = ta * powa % p;
	}
	return -1;
}

ll exbsgs(ll a, ll b, ll p) { //扩展北上广深QAQ	gcd(a,p)≠1
	b %= p;
	if (a == 0 && b == 0) return 1;
	else if (a == 0 && b != 0) return -1;
	if (b == 1 || p == 1) return 0;
	ll d = gcd(a, p);
	if (b % d != 0) return -1;
	p /= d;
	b = b / d * ex_inv(a / d, p) % p;
	if (d != 1) {
		ll ans = exbsgs(a, b, p);
		return ans == -1 ? -1 : (ans + 1);
	}
	ll ans = bsgs(a, b, p);
	return ans == -1 ? -1 : (ans + 1);
}

ll m[maxn], a[maxn];
ll crt(ll len) { //中国剩余定理	//main函数注意，若只有一个式子时，结果为a[0]
	ll lcm = 1, ans = 0;
	for (int i = 0; i < len; i++) {
		ll k0, ki;
		ll d = ex_gcd(lcm, m[i], k0, ki);
		if ((a[i] - ans) % d != 0) return -1;
		else {
			ll t = m[i] / d;
			k0 = (k0 * (a[i] - ans) / d % t + t) % t;
			ans = k0 * lcm + ans;
			lcm = lcm / d * m[i];
		}
	}
	return ans;
}

ll jie[maxn], rjie[maxn];
void init_jie(ll n, ll mod) {
	jie[0] = 1;
	for (ll i = 1; i <= n; i++) jie[i] = jie[i - 1] * i % mod;
	for (int i = 0; i <= n; i++) rjie[i] = ex_inv(jie[i], mod);
}
ll C(ll n, ll k, ll mod) {
	return jie[n] * rjie[k] % mod * rjie[n - k] % mod;
}
ll Lucas(ll n, ll k, ll mod) {	 //返回n取k对mod取模
	if (n < k) return 0;
	if (n >= mod) return Lucas(n / mod, k / mod, mod) * Lucas(n % mod, k % mod, mod) % mod;
	else return jie[n] * rjie[n - k] % mod * rjie[k] % mod;
}

ll getNum0fP(ll n, ll p) {
	if (n < p) return 0;
	return getNum0fP(n / p, p) + n / p;
}
ll getJieWithoutP(ll n, ll p, ll mod) {
	if (n == 0) return 1;
	ll g = 1, T = n / mod, Yu = n % mod;
	for (ll i = 1; i <= mod - 1; i++) if (i % p) g = g * i % mod;
	g = fpow(g, T, mod);
	for (ll i = 1; i <= Yu; i++) if (i % p) g = g * i % mod;
	return (g * getJieWithoutP(n / p, p, mod)) % mod;
}
ll Comdp(ll n, ll k, ll p, ll mod) {
	ll partWithoutP = fmul(fmul(getJieWithoutP(n, p, mod), ex_inv(getJieWithoutP(n - k, p, mod), mod), mod), ex_inv(getJieWithoutP(k, p, mod), mod), mod);
	ll partWithP = fpow(p, getNum0fP(n, p) - getNum0fP(n - k, p) - getNum0fP(k, p), mod);
	return fmul(partWithoutP, partWithP, mod);
}
ll exLucas(ll n, ll k, ll p) {
	ll cnt = 0;
	for (ll i = 2; i * i <= p; i++) {
		if (p % i == 0) {
			ll tmp = 1;
			while (p % i == 0) { p /= i; tmp *= i; }
			m[cnt] = tmp;
			a[cnt++] = Comdp(n, k, i, tmp);
		}
	}
	if (p > 1) {
		m[cnt] = p;
		a[cnt++] = Comdp(n, k, p, p);
	}
	return crt(cnt);
}

int main() {
	//O_O;
	int t; cin >> t;
	while (t--) {
		ll n, m, k, x, sum = 1; cin >> n >> m >> k;
		for (ll i = 1; i <= k; i++) cin >> x, sum *= x;
		cout << exLucas(n, m, sum) << "\n";
	}

	return 0;
}
